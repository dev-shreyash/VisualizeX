[

    {
    "key": "bubbleSort",
    "algorithm": "Bubble Sort",
    "description": "Bubble Sort is a simple comparison-based sorting algorithm where adjacent elements are compared and swapped if they are in the wrong order. This process repeats until the entire array is sorted.",
    "steps": [
      "Iterate through the array multiple times.",
      "During each pass, compare adjacent elements:",
      "If the current element is greater than the next, swap them.",
      "After each pass, the largest unsorted element 'bubbles up' to its correct position at the end of the array.",
      "Repeat until no swaps are needed, indicating the array is sorted."
    ],
    "keyConcepts": [
      "Adjacent Comparison",
      "Swapping",
      "Passes",
      "Optimization: Stop the process early if no swaps occur in a pass (array is already sorted)."
    ],
    "complexity": {
      "time": {
        "worstCase": "O(n^2)",
        "bestCase": "O(n) with early exit optimization",
        "averageCase": "O(n^2)"
      },
      "space": "O(1)"
    },
    "advantages": [
      "Simple and easy to implement.",
      "Best case O(n) if optimized for early exit."
    ],
    "disadvantages": [
      "Inefficient for large datasets due to O(n^2) complexity.",
      "Not suitable for real-world applications requiring high performance."
    ],
    "practicalUse": [
      "Educational purposes to demonstrate sorting concepts.",
      "Small datasets where implementation simplicity is more critical than efficiency."
    ]
    },
    {
        "key": "mergeSortTopDown",
        "algorithm": "Merge Sort (Top-Down)",
        "description": "Merge Sort is a divide-and-conquer sorting algorithm that divides the array into halves, recursively sorts them, and then merges the sorted halves into a single sorted array.",
        "steps": [
          "Divide the array into two halves.",
          "Recursively apply Merge Sort to each half.",
          "Once the halves are sorted, merge them into a single sorted array:",
          "Compare elements from each half and add the smaller element to the result array.",
          "Repeat until all elements from both halves are merged."
        ],
        "keyConcepts": [
          "Divide and Conquer",
          "Recursion",
          "Merging",
          "Stable Sorting (maintains the relative order of equal elements)."
        ],
        "complexity": {
          "time": {
            "worstCase": "O(n log n)",
            "bestCase": "O(n log n)",
            "averageCase": "O(n log n)"
          },
          "space": "O(n) for temporary arrays"
        },
        "advantages": [
          "Consistent O(n log n) performance for all cases.",
          "Stable sorting algorithm.",
          "Well-suited for sorting linked lists."
        ],
        "disadvantages": [
          "Requires additional space for merging (O(n) space complexity).",
          "Recursion can cause a stack overflow for very large arrays."
        ],
        "practicalUse": [
          "Sorting datasets that require stability.",
          "Sorting linked lists due to its efficient merging process.",
          "Useful in external sorting where data is stored on disk."
        ]
      },
      {
        "key": "mergeSortBottomUp",
        "algorithm": "Merge Sort (Bottom-Up)",
        "description": "Bottom-Up Merge Sort is an iterative version of the Merge Sort algorithm. It starts with small subarrays and iteratively merges them into larger sorted arrays until the entire array is sorted.",
        "steps": [
          "Divide the array into subarrays of size 1.",
          "Iteratively merge adjacent subarrays into larger sorted arrays.",
          "Double the size of subarrays in each iteration until the entire array is sorted."
        ],
        "keyConcepts": [
          "Iterative Process",
          "Merging",
          "Stable Sorting (maintains the relative order of equal elements)."
        ],
        "complexity": {
          "time": {
            "worstCase": "O(n log n)",
            "bestCase": "O(n log n)",
            "averageCase": "O(n log n)"
          },
          "space": "O(n) for temporary arrays"
        },
        "advantages": [
          "Consistent O(n log n) performance for all cases.",
          "Avoids recursion, making it suitable for systems with limited stack space.",
          "Stable sorting algorithm."
        ],
        "disadvantages": [
          "Requires additional space for merging (O(n) space complexity).",
          "May be less intuitive compared to the recursive top-down approach."
        ],
        "practicalUse": [
          "Sorting datasets that require stability.",
          "Systems where recursion is not ideal or stack space is limited.",
          "Useful in external sorting when dealing with large datasets stored on disk."
        ]
      },
      {
        "key": "quickSort",
        "algorithm": "Quick Sort",
        "description": "Quick Sort is a divide-and-conquer sorting algorithm that works by selecting a pivot element, partitioning the array into elements less than the pivot and greater than the pivot, and recursively sorting the subarrays.",
        "steps": [
          "Choose a pivot element from the array.",
          "Partition the array into two subarrays: one with elements smaller than the pivot and one with elements greater than the pivot.",
          "Recursively apply Quick Sort to the subarrays.",
          "The base case is when the subarray has fewer than two elements."
        ],
        "keyConcepts": [
          "Divide and Conquer",
          "Pivot Selection",
          "Partitioning",
          "Recursion"
        ],
        "complexity": {
          "time": {
            "worstCase": "O(n^2) with poor pivot selection",
            "bestCase": "O(n log n) with good pivot selection",
            "averageCase": "O(n log n)"
          },
          "space": "O(log n) for recursion stack"
        },
        "advantages": [
          "Efficient for large datasets with average-case O(n log n) time complexity.",
          "In-place sorting, requires minimal additional memory.",
          "Faster than merge sort for smaller arrays."
        ],
        "disadvantages": [
          "Worst-case O(n^2) time complexity when pivot selection is poor.",
          "Not stable (does not maintain the relative order of equal elements).",
          "Recursion stack can cause stack overflow for large arrays."
        ],
        "practicalUse": [
          "Sorting large datasets in applications where space efficiency is important.",
          "Used in various built-in sorting functions in many programming languages.",
          "Efficient for sorting arrays in-memory."
        ]
      },
      {
        "key": "selectionSort",
        "algorithm": "Selection Sort",
        "description": "Selection Sort is a simple comparison-based sorting algorithm. It works by repeatedly finding the smallest (or largest) element from the unsorted part of the array and swapping it with the first unsorted element.",
        "steps": [
          "Start with the first element in the array.",
          "Find the smallest element in the unsorted portion of the array.",
          "Swap the smallest element with the first unsorted element.",
          "Move to the next element and repeat the process for the remaining unsorted portion of the array.",
          "Continue until the entire array is sorted."
        ],
        "keyConcepts": [
          "Selection of the smallest (or largest) element",
          "Swapping",
          "In-place Sorting"
        ],
        "complexity": {
          "time": {
            "worstCase": "O(n^2)",
            "bestCase": "O(n^2)",
            "averageCase": "O(n^2)"
          },
          "space": "O(1)"
        },
        "advantages": [
          "Simple to implement.",
          "In-place sorting (no extra memory required).",
          "Does not require recursion."
        ],
        "disadvantages": [
          "Inefficient for large datasets due to O(n^2) time complexity.",
          "Does not take advantage of partially sorted arrays.",
          "Not a stable sorting algorithm."
        ],
        "practicalUse": [
          "Educational purposes to demonstrate sorting concepts.",
          "Small datasets where simplicity is more important than efficiency."
        ]
      },
      {
        "key": "insertionSort",
        "algorithm": "Insertion Sort",
        "description": "Insertion Sort is a simple comparison-based sorting algorithm. It builds the final sorted array one item at a time by repeatedly picking the next element and inserting it into its correct position in the already sorted portion of the array.",
        "steps": [
          "Start with the second element in the array (the first element is already considered sorted).",
          "Compare the current element with the elements in the sorted portion of the array.",
          "Move all elements that are greater than the current element one position to the right.",
          "Insert the current element into its correct position in the sorted portion.",
          "Repeat for all remaining elements in the array."
        ],
        "keyConcepts": [
          "Building Sorted Array",
          "Insertion",
          "Shifting Elements"
        ],
        "complexity": {
          "time": {
            "worstCase": "O(n^2) when the array is in reverse order",
            "bestCase": "O(n) when the array is already sorted",
            "averageCase": "O(n^2)"
          },
          "space": "O(1)"
        },
        "advantages": [
          "Simple to implement.",
          "Efficient for small datasets or nearly sorted arrays.",
          "In-place sorting (no extra memory required).",
          "Stable sorting algorithm (maintains the relative order of equal elements)."
        ],
        "disadvantages": [
          "Inefficient for large datasets with O(nÂ²) time complexity.",
          "Does not take advantage of fully sorted or partially sorted arrays in the worst case."
        ],
        "practicalUse": [
          "Sorting small or nearly sorted datasets.",
          "Used in practical applications like sorting small lists in algorithms that use a hybrid approach."
        ]
      },
      {
        "key": "gnomeSort",
        "algorithm": "Gnome Sort",
        "description": "Gnome Sort is a simple comparison-based sorting algorithm that works by comparing and swapping adjacent elements, similar to insertion sort, but with a different approach. It is sometimes referred to as a 'stupid sort' because of its simplicity, but can be efficient for small datasets.",
        "steps": [
          "Start with the first element in the array.",
          "Compare the current element with the previous one.",
          "If the current element is smaller than the previous one, swap them and move one step back.",
          "If the current element is greater than or equal to the previous one, move one step forward.",
          "Repeat until the entire array is sorted."
        ],
        "keyConcepts": [
          "Comparison",
          "Swapping Elements",
          "Step-by-Step Approach"
        ],
        "complexity": {
          "time": {
            "worstCase": "O(n^2) in the worst case, similar to bubble sort and insertion sort.",
            "bestCase": "O(n) when the array is already sorted.",
            "averageCase": "O(n^2)"
          },
          "space": "O(1)"
        },
        "advantages": [
          "Simple to implement.",
          "In-place sorting (no extra memory required).",
          "Stable sorting algorithm (maintains the relative order of equal elements).",
          "Works well for small datasets."
        ],
        "disadvantages": [
          "Inefficient for large datasets with O(nÂ²) time complexity.",
          "Not widely used in practice due to inefficiency compared to other algorithms."
        ],
        "practicalUse": [
          "Sorting small datasets.",
          "Used in some educational contexts to teach sorting algorithms."
        ]
      },
      {
        "key": "combSort",
        "algorithm": "Comb Sort",
        "description": "Comb Sort is an improvement over Bubble Sort that works by comparing elements far apart and gradually reducing the gap between them. It eliminates small values at the end of the list more efficiently than Bubble Sort.",
        "steps": [
          "Start with a large gap value, typically the length of the array divided by a shrink factor (usually around 1.3).",
          "Compare elements that are 'gap' positions apart.",
          "If the elements are in the wrong order, swap them.",
          "Reduce the gap size and repeat the process until the gap becomes 1.",
          "Perform a final pass with gap size 1 to ensure all elements are sorted."
        ],
        "keyConcepts": [
          "Gap Sequence",
          "Swapping Elements",
          "Reducing Gap"
        ],
        "complexity": {
          "time": {
            "worstCase": "O(n^2) for the worst-case scenario with the largest gap.",
            "bestCase": "O(n log n) when the gap reduces effectively.",
            "averageCase": "O(n log n)"
          },
          "space": "O(1)"
        },
        "advantages": [
          "More efficient than Bubble Sort, especially for large datasets.",
          "Simple to implement.",
          "In-place sorting (no extra memory required)."
        ],
        "disadvantages": [
          "Not a stable sorting algorithm.",
          "Still not optimal for very large arrays compared to algorithms like Quick Sort or Merge Sort."
        ],
        "practicalUse": [
          "Used in cases where Bubble Sort would be too slow.",
          "Efficient for datasets where the number of swaps is reduced by using a gap sequence."
        ]
      },
      {
        "key": "oddEvenSort",
        "algorithm": "Odd-Even Sort",
        "description": "Odd-Even Sort is a parallel sorting algorithm that alternates between comparing and swapping elements in odd and even indexed positions. It operates in two phases: odd and even, which repeat until no swaps are made.",
        "steps": [
          "Start with the odd phase: compare odd indexed elements with the next even indexed element, and swap them if necessary.",
          "Next, perform the even phase: compare even indexed elements with the next odd indexed element, and swap them if necessary.",
          "Repeat the odd and even phases until no swaps are made, indicating the array is sorted."
        ],
        "keyConcepts": [
          "Parallel Sorting",
          "Alternating Phases",
          "Swapping Elements"
        ],
        "complexity": {
          "time": {
            "worstCase": "O(n^2) when the array is in reverse order",
            "bestCase": "O(n) when the array is already sorted",
            "averageCase": "O(n^2)"
          },
          "space": "O(1)"
        },
        "advantages": [
          "Simple to implement.",
          "In-place sorting (no extra memory required).",
          "Works well for small or partially sorted arrays."
        ],
        "disadvantages": [
          "Inefficient for large datasets due to O(nÂ²) time complexity.",
          "Does not take advantage of sorted or partially sorted arrays in the worst case."
        ],
        "practicalUse": [
          "Used in parallel processing environments or small datasets where simple sorting is needed."
        ]
      },
      {
        "key": "shellSort",
        "algorithm": "Shell Sort",
        "description": "Shell Sort is an in-place comparison-based sorting algorithm that generalizes insertion sort by allowing the exchange of items that are far apart. It starts by sorting elements far apart and gradually reducing the gap between elements to be compared.",
        "steps": [
          "Start with an initial gap size, typically half the length of the array.",
          "Perform an insertion sort for elements that are at the current gap distance apart.",
          "Gradually reduce the gap size and repeat the sorting steps.",
          "Continue until the gap size becomes 1, performing a final insertion sort for the last elements."
        ],
        "keyConcepts": [
          "Gap Reduction",
          "Insertion Sort Optimization",
          "In-Place Sorting"
        ],
        "complexity": {
          "time": {
            "worstCase": "O(n^2) for larger gaps, depending on the gap sequence",
            "bestCase": "O(n log n) for certain gap sequences",
            "averageCase": "O(n log n) for certain gap sequences"
          },
          "space": "O(1)"
        },
        "advantages": [
          "Improves upon insertion sort by allowing the exchange of distant elements.",
          "Efficient for moderately large datasets.",
          "In-place sorting (no extra memory required)."
        ],
        "disadvantages": [
          "Performance heavily depends on the choice of gap sequence.",
          "Inefficient for large datasets when using poor gap sequences."
        ],
        "practicalUse": [
          "Used for sorting moderately large datasets.",
          "Commonly used in scenarios where memory space is limited."
        ]
      },
      {
        "key": "pancakeSort",
        "algorithm": "Pancake Sort",
        "description": "Pancake Sort is a sorting algorithm that uses a series of flip operations to sort the array. The objective is to sort the array in ascending order by flipping the largest unsorted element to the top and then flipping it into its correct position.",
        "steps": [
          "Find the largest unsorted element in the array.",
          "Flip the largest element to the front of the array.",
          "Flip the largest element from the front to its correct position in the sorted portion.",
          "Repeat the process for the next largest element until the entire array is sorted."
        ],
        "keyConcepts": [
          "Flipping",
          "Selection",
          "Greedy Strategy"
        ],
        "complexity": {
          "time": {
            "worstCase": "O(n^2)",
            "bestCase": "O(n)",
            "averageCase": "O(n^2)"
          },
          "space": "O(1)"
        },
        "advantages": [
          "Simple concept.",
          "In-place sorting (no extra memory required)."
        ],
        "disadvantages": [
          "Inefficient for large datasets.",
          "Worst-case time complexity is quadratic."
        ],
        "practicalUse": [
          "Primarily used as a teaching tool or in specialized applications where flipping operations are critical."
        ]
      },
      {
        "key": "bogoSort",
        "algorithm": "Bogo Sort",
        "description": "Bogo Sort is a highly inefficient sorting algorithm based on random shuffling. It repeatedly shuffles the elements in the array and checks if the array is sorted. It continues shuffling until the array is sorted.",
        "steps": [
          "Randomly shuffle the array.",
          "Check if the array is sorted.",
          "If sorted, stop; otherwise, repeat the process."
        ],
        "keyConcepts": [
          "Randomness",
          "Brute Force",
          "Inefficiency"
        ],
        "complexity": {
          "time": {
            "worstCase": "O((n!)^2)",
            "bestCase": "O(n)",
            "averageCase": "O(n!)"
          },
          "space": "O(1)"
        },
        "advantages": [
          "Simple to implement.",
          "Conceptually easy to understand."
        ],
        "disadvantages": [
          "Extremely inefficient for any practical use.",
          "Worst-case time complexity is factorial."
        ],
        "practicalUse": [
          "Not used in practice due to inefficiency.",
          "Mainly used as a theoretical or educational tool."
        ]
      },
      {
        "key": "cycleSort",
        "algorithm": "Cycle Sort",
        "description": "Cycle Sort is a non-comparative sorting algorithm that is based on the idea of placing elements in their correct positions. It works by finding the correct position of each element and moving the elements into their correct position one at a time.",
        "steps": [
          "Start from the first element and find its correct position in the array.",
          "Place the element in the correct position.",
          "Repeat for all elements until the entire array is sorted."
        ],
        "keyConcepts": [
          "Non-Comparative",
          "Placement",
          "In-Place Sorting"
        ],
        "complexity": {
          "time": {
            "worstCase": "O(n^2)",
            "bestCase": "O(n^2)",
            "averageCase": "O(n^2)"
          },
          "space": "O(1)"
        },
        "advantages": [
          "In-place sorting.",
          "Minimizes the number of swaps."
        ],
        "disadvantages": [
          "Inefficient for large arrays.",
          "Requires extra space for finding the correct position."
        ],
        "practicalUse": [
          "Used in situations where minimizing the number of swaps is important."
        ]
      },
      {
        "key": "timSort",
        "algorithm": "Tim Sort",
        "description": "Tim Sort is a hybrid sorting algorithm derived from Merge Sort and Insertion Sort. It is designed to perform well on many kinds of real-world data, by exploiting the fact that real-world data often contains ordered sequences.",
        "steps": [
          "Split the array into smaller subarrays, each of which is sorted using Insertion Sort.",
          "Merge the sorted subarrays using Merge Sort.",
          "Repeat until the entire array is sorted."
        ],
        "keyConcepts": [
          "Hybrid Sorting",
          "Merge Sort",
          "Insertion Sort"
        ],
        "complexity": {
          "time": {
            "worstCase": "O(n log n)",
            "bestCase": "O(n)",
            "averageCase": "O(n log n)"
          },
          "space": "O(n)"
        },
        "advantages": [
          "Excellent performance on real-world datasets.",
          "Adapts well to partially sorted data."
        ],
        "disadvantages": [
          "More complex than other algorithms.",
          "Extra memory usage for merging subarrays."
        ],
        "practicalUse": [
          "Used in practice for sorting tasks where performance on real-world data is critical."
        ]
      },
      {
        "key": "heapSort",
        "algorithm": "Heap Sort",
        "description": "Heap Sort is a comparison-based sorting algorithm that uses a binary heap data structure. It first builds a max heap (or min heap) from the input data and then repeatedly extracts the root element from the heap and rebuilds the heap.",
        "steps": [
          "Build a max heap from the array.",
          "Swap the root element (max value) with the last element.",
          "Rebuild the heap after each extraction.",
          "Repeat until the array is sorted."
        ],
        "keyConcepts": [
          "Heap Data Structure",
          "Selection",
          "In-Place Sorting"
        ],
        "complexity": {
          "time": {
            "worstCase": "O(n log n)",
            "bestCase": "O(n log n)",
            "averageCase": "O(n log n)"
          },
          "space": "O(1)"
        },
        "advantages": [
          "In-place sorting.",
          "Time complexity is guaranteed to be O(n log n)."
        ],
        "disadvantages": [
          "Slower than Merge Sort and Quick Sort in practice.",
          "Not stable."
        ],
        "practicalUse": [
          "Used in applications where in-place sorting is important and the data structure needs to support efficient element removal (priority queues)."
        ]
      },
      {
        "key": "radixSort",
        "algorithm": "Radix Sort",
        "description": "Radix Sort is a non-comparative sorting algorithm that sorts numbers by processing individual digits. It processes the numbers digit by digit, from the least significant digit to the most significant digit, using a stable sub-sorting algorithm like Counting Sort.",
        "steps": [
          "Group the numbers based on each digit, starting from the least significant digit.",
          "Sort each group using a stable sub-sorting algorithm.",
          "Repeat for all digits until the array is sorted."
        ],
        "keyConcepts": [
          "Non-Comparative",
          "Digit Processing",
          "Stable Sorting"
        ],
        "complexity": {
          "time": {
            "worstCase": "O(nk), where k is the number of digits",
            "bestCase": "O(nk)",
            "averageCase": "O(nk)"
          },
          "space": "O(n + k)"
        },
        "advantages": [
          "Linear time complexity for large datasets when k is small.",
          "Works well with fixed-length integers."
        ],
        "disadvantages": [
          "Not suitable for non-integer data.",
          "Needs extra memory for counting sort."
        ],
        "practicalUse": [
          "Used in applications where the input has a fixed range or can be mapped to integers."
        ]
      },
      {
        "key": "bucketSort",
        "algorithm": "Bucket Sort",
        "description": "Bucket Sort is a distribution-based sorting algorithm that divides the input into several 'buckets'. Each bucket is then sorted individually (usually using another sorting algorithm), and the sorted buckets are combined to form the sorted array.",
        "steps": [
          "Divide the array into several 'buckets'.",
          "Sort each bucket individually.",
          "Concatenate the sorted buckets to form the sorted array."
        ],
        "keyConcepts": [
          "Distribution-Based Sorting",
          "Buckets",
          "Divide and Conquer"
        ],
        "complexity": {
          "time": {
            "worstCase": "O(n^2) if each bucket has only one element",
            "bestCase": "O(n + k) where k is the number of buckets",
            "averageCase": "O(n + k)"
          },
          "space": "O(n + k)"
        },
        "advantages": [
          "Can achieve linear time complexity with uniform distribution.",
          "Efficient for sorting data that is uniformly distributed."
        ],
        "disadvantages": [
          "Not efficient for small ranges or non-uniform data.",
          "Needs extra space for the buckets."
        ],
        "practicalUse": [
          "Used in applications where input data is uniformly distributed."
        ]
      }
      
      
      
      
      
      
      
      
]
  